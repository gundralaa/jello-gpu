layout(local_size_x = 1) in;

layout(std140, binding = 1) buffer positions_SSBO {
    vec4 positions[];
};

layout(std140, binding = 2) buffer last_positions_SSBO {
    vec4 last_positions[];
};

layout(std140, binding = 3) buffer corrections_SSBO { 
    vec4 corrections[];
};

layout(std140, binding = 5) buffer spheres_SSBO { 
    vec4 spheres[];
};

layout(std140, binding = 6) buffer planes_SSBO { 
    vec4 planes[];
};

void main()
{
    for (int i=0; i<NUM_PLANES; i++)
    {
        vec3 normal = planes[i].xyz;
        vec3 point = normal*planes[i].w;
        float dist = dot(normal, positions[gl_WorkGroupID.x].xyz-point);
        dist += sign(dist) * 0.001;
        if (dist * dot(normal, last_positions[gl_WorkGroupID.x].xyz-point) < 0.0f)
            corrections[gl_WorkGroupID.x] -= vec4(normal*dist, 0)*1.15f;
    }

    for (int i=0; i<NUM_SPHERES; i++)
    {
        vec3 pos = positions[gl_WorkGroupID.x].xyz;
        vec4 sphere = spheres[i];
        float dist = distance(pos, sphere.xyz);
        if (dist < sphere.w)
        {
            corrections[gl_WorkGroupID.x] += vec4((sphere.w/dist-1) * (pos - sphere.xyz), 0) * 1.15;
        }
    }
}